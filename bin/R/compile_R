#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

### BUILD_DIR     /tmp/app
### BUILDPACK_DIR /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b
###               /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b/dependencies/*.deb
### CACHE_DIR     /tmp/cache
### APT_CACHE_DIR /tmp/cache/apt/cache/archives/
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
CHROOT_DIR="/home/vcap/app"

#CRAN_MIRROR="http://cran.nexr.com"
CRAN_MIRROR="http://cran.ism.ac.jp"


# env for staging.
export PATH="$CHROOT_DIR/usr/bin:$CHROOT_DIR/usr/sbin:$CHROOT_DIR/usr/lib/rstudio-server:/sbin:/usr/sbin:$PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/fakechroot:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$CHROOT_DIR/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"



topic "Setting up R runtime environment"  # fakeroot
mkdir -p $CHROOT_DIR/.profile.d
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p $CHROOT_DIR/apts_from_buildpack


cp $BUILDPACK_DIR/bin/R/*.sh $CHROOT_DIR/
cp $BUILDPACK_DIR/bin/R/r_environment.sh $CHROOT_DIR/.profile.d/r_environment.sh 
cp $BUILDPACK_DIR/bin/R/testmap.cpp $CHROOT_DIR/testmap.cpp
cp $BUILDPACK_DIR/bin/R/uname $CHROOT_DIR/uname
chmod 777 $CHROOT_DIR/*.sh

topic "tar xf home_vcap_app_fakechroot-merged.tar.gz"
cd /home/vcap
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR home_vcap_app_fakechroot-merged.tar.gz 1 home_vcap_app_fakechroot-merged.tar.gz
if [[ ! -f "home_vcap_app_fakechroot-merged.tar.gz" ]]; then
   echo "[ERROR] home_vcap_app_fakechroot-merged.tar.gz not found in R-buildpack. check R-buildpack/manifest.yml"  | indent
   exit 1
fi
tar xf home_vcap_app_fakechroot-merged.tar.gz  > /dev/null 2>&1 
rm home_vcap_app_fakechroot-merged.tar.gz



#topic "Validating apt-get environment(final)"
#fakechroot fakeroot chroot $CHROOT_DIR dpkg --configure -a
#fakechroot fakeroot chroot $CHROOT_DIR apt-get update
#fakechroot fakeroot chroot $CHROOT_DIR apt-get install -f


topic "Installing apts from Aptfile(online downloading)"
if [ -s $BUILD_DIR/Aptfile ]; then
  mkdir -p $CHROOT_DIR/apts_from_aptfile/archives
  for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
    if [[ $PACKAGE == *deb ]]; then
      PACKAGE_NAME=$(basename $PACKAGE .deb)
      PACKAGE_FILE=$CHROOT_DIR/apts_from_aptfile/$PACKAGE_NAME.deb
      topic "Fetching $PACKAGE"
      curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
    else
      topic "Fetching .debs for $PACKAGE"
      fakechroot fakeroot chroot $CHROOT_DIR apt-get -o dir::cache=/apts_from_aptfile  -y --force-yes -d install --reinstall $PACKAGE 2>&1 | indent
      #fakechroot fakeroot chroot $CHROOT_DIR apt-get -o dir::cache=/apts_from_aptfile  -y  -d install  $PACKAGE 2>&1 | indent
    fi
  done

  #**************************************************************************************************
  ## archived apt files can be packaged into buildpack later.
  ## download using 'cf download-droplet <app-name> <local_file_path>'
  ## /apts_from_aptfile folder to download *.deb which can be use to make buildpack later.
  #**************************************************************************************************
  if [ $(find $CHROOT_DIR/apts_from_aptfile/archives -maxdepth 1 -name '*.deb' -type f | wc -l ) -gt 0 ]; then
    fakechroot fakeroot chroot $CHROOT_DIR /fakeroot_install_apts.sh /apts_from_aptfile/archives 2>&1 | indent
    
  else
    echo "no *.deb fetched from 'Aptfile'. skip"  | indent
  fi
else
  echo "no 'Aptfile' uploaded. skip" | indent
fi


topic "Install r binary packages into R (offline from buildpack) - pre-comiled"
## build binary package from source package using following command
## $ wget http://cran.us.r-project.org/src/contrib/shiny_1.0.5.tar.gz
## $ R CMD INSTALL --build ./shiny_1.0.5.tar.gz
## it will generate binary package. then cache the binary to buildpack under 'apt-archives' or public uri.
## $ R CMD INSTALL ./shiny_1.0.5_R_x86_64-pc-linux-gnu.tar.gz
mkdir -p $CHROOT_DIR/r_packages && cd $CHROOT_DIR/r_packages

#shiny
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR Rcpp 0.12.12 Rcpp_0.12.12.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR httpvu 1.3.5 httpuv_1.3.5.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR mime 0.5 mime_0.5.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR jsonlite 1.5 jsonlite_1.5.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR xtable 1.8 xtable_1.8-2.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR digest 0.6.12 digest_0.6.12.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR htmltools 0.3.6 htmltools_0.3.6.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR R6 2.2.2 R6_2.2.2.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR sourcetools 0.1.6 sourcetools_0.1.6.tar.gz
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR shiny 1.0.5 shiny_1.0.5.tar.gz


## ggplot2
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR RColorBrewer_1.1-2_R_x86_64-pc-linux-gnu.tar.gz 1 RColorBrewer_1.1-2_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR colorspace_1.3-2_R_x86_64-pc-linux-gnu.tar.gz 1 colorspace_1.3-2_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR dichromat_2.0-0_R_x86_64-pc-linux-gnu.tar.gz 1 dichromat_2.0-0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR digest_0.6.12_R_x86_64-pc-linux-gnu.tar.gz 1 digest_0.6.12_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR ggplot2_2.2.1_R_x86_64-pc-linux-gnu.tar.gz 1 ggplot2_2.2.1_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR gtable_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 1 gtable_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR htmltools_0.3.6_R_x86_64-pc-linux-gnu.tar.gz 1 htmltools_0.3.6_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR httpuv_1.3.5_R_x86_64-pc-linux-gnu.tar.gz 1 httpuv_1.3.5_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR jsonlite_1.5_R_x86_64-pc-linux-gnu.tar.gz 1 jsonlite_1.5_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR labeling_0.3_R_x86_64-pc-linux-gnu.tar.gz 1 labeling_0.3_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR lazyeval_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 1 lazyeval_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR mime_0.5_R_x86_64-pc-linux-gnu.tar.gz 1 mime_0.5_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR munsell_0.4.3_R_x86_64-pc-linux-gnu.tar.gz 1 munsell_0.4.3_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR plyr_1.8.4_R_x86_64-pc-linux-gnu.tar.gz 1 plyr_1.8.4_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR reshape2_1.4.2_R_x86_64-pc-linux-gnu.tar.gz 1 reshape2_1.4.2_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR rlang_0.1.2_R_x86_64-pc-linux-gnu.tar.gz 1 rlang_0.1.2_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR scales_0.5.0_R_x86_64-pc-linux-gnu.tar.gz 1 scales_0.5.0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR shiny_1.0.5_R_x86_64-pc-linux-gnu.tar.gz 1 shiny_1.0.5_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR sourcetools_0.1.6_R_x86_64-pc-linux-gnu.tar.gz 1 sourcetools_0.1.6_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR stringi_1.1.5_R_x86_64-pc-linux-gnu.tar.gz 1 stringi_1.1.5_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR stringr_1.2.0_R_x86_64-pc-linux-gnu.tar.gz 1 stringr_1.2.0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR tibble_1.3.4_R_x86_64-pc-linux-gnu.tar.gz 1 tibble_1.3.4_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR viridisLite_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 1 viridisLite_0.2.0_R_x86_64-pc-linux-gnu.tar.gz 
$BUILDPACK_DIR/bin/R/download_dependency $BUILDPACK_DIR xtable_1.8-2_R_x86_64-pc-linux-gnu.tar.gz 1 xtable_1.8-2_R_x86_64-pc-linux-gnu.tar.gz 


fakechroot fakeroot chroot $CHROOT_DIR sh /fakeroot_install_r_packages.sh 2>&1 | indent
rm -rf $CHROOT_DIR/r_packages
cd $CHROOT_DIR


# install application author dependencies from CRAN
topic "R initialize: Executing init.r script (online downloading dependencies)"
# get the init.r file to use
# it can be init.[rR] or run.R
if [[ -f "$BUILD_DIR/init.r" ]]; then
  INIT_FILE="$BUILD_DIR/init.r"
elif [[ -f "$BUILD_DIR/init.R" ]]; then
  INIT_FILE="$BUILD_DIR/init.R"
else
  # assuming run.R is present
  unset INIT_FILE
fi


if [[ ! -z "$INIT_FILE" ]]; then
  # prepare wrapper script
  WRAPPER="$CHROOT_DIR/wrapper.R"
  cp "$BUILDPACK_DIR/bin/R/wrapper.R" $WRAPPER

  # perform insertions
  #  would have preferred to use sed or awk for this, but it's real tricky with multi-line
  #  replacements, so using a Ruby program, as Ruby is installed on Heroku by default
  ruby "$BUILDPACK_DIR/bin/R/util.rb" "$WRAPPER" "$INIT_FILE" "$CHROOT_DIR" "$CRAN_MIRROR"

  # execute the init wrapper
  # working directory must be /app so that provided packages/scripts can be found
  fakechroot fakeroot chroot $CHROOT_DIR /fakeroot_run_init_r.sh /wrapper.R   2>&1 | indent

  # determine whether the R script failed
  if [[ -f "$CHROOT_DIR/r_init_status" ]]; then
    echo "R initialized successfully" | indent
  else
    echo -e "\033[1;31mERROR: R initialize failed while executing \"$INIT_FILE\" you uploaded. Check the log for details.\033[0m" | indent
    exit 1
  fi

else
  echo "R initialized successfully" | indent
fi


topic "Finalizing staged image"
## topic "moving  $CHROOT_DIR/*  => $BUILD_DIR "
cp -r $BUILD_DIR/* $CHROOT_DIR/
rm -rf $BUILD_DIR/*
mv $CHROOT_DIR/*  $BUILD_DIR
mkdir -p $BUILD_DIR/.profile.d 
cp -r $CHROOT_DIR/.profile.d/*  $BUILD_DIR/.profile.d/


cd /home/vcap


topic "Staging completed"

