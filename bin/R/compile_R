#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/R/staging_common.sh

### BUILD_DIR     /tmp/app
### BUILDPACK_DIR /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b
###               /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b/dependencies/*.deb
### CACHE_DIR     /tmp/cache
### APT_CACHE_DIR /tmp/cache/apt/cache/archives/
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
CHROOT_DIR="/home/vcap/app"


# env for staging.
export PATH="$CHROOT_DIR/usr/bin:$CHROOT_DIR/usr/sbin:$CHROOT_DIR/usr/lib/rstudio-server:/sbin:/usr/sbin:$PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/fakechroot:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$CHROOT_DIR/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
#APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"


topic "Setup pre-compiled R runtime environment"  # home_vcap_app_fakechroot
mkdir -p $CHROOT_DIR/.profile.d
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p $CHROOT_DIR/apts_from_buildpack



## pre installed fakechroot pcakge for home/vcap/app .
cd /home/vcap
MERGED_IMAGE_URL=$BUILDPACK_DIR/apt-archives-final/home-vcap-app-image/home_vcap_app_fakechroot-merged.tar.gz
if [[ ! -f "$MERGED_IMAGE_URL" ]]; then
   echo "[ERROR] home_vcap_app_fakechroot-merged.tar.gz not found in R-buildpack. check R-buildpack/manifest.yml"  | indent
   exit 1
fi
tar xf $MERGED_IMAGE_URL  > /dev/null 2>&1 

# copy shell scripts ( recover from over-written by home_vcap_app_fakechroot-merged.tar.gz)
cp $BUILDPACK_DIR/bin/R/*.sh $CHROOT_DIR
chmod 777 $CHROOT_DIR/*.sh
cp $BUILDPACK_DIR/bin/R/r_environment.sh $CHROOT_DIR/.profile.d/r_environment.sh 
cp $BUILDPACK_DIR/bin/R/testmap.cpp $CHROOT_DIR/testmap.cpp
cp $BUILDPACK_DIR/bin/R/uname $CHROOT_DIR/uname


$CHROOT_DIR/fakeroot_update_apt_repo.sh $BUILD_DIR $CHROOT_DIR 2>&1 | indent


topic "Installing R apts from buildpack (cached)"
$CHROOT_DIR/fakeroot_install_apts_archives.sh "$BUILDPACK_DIR" "$CHROOT_DIR" "plotly-dependency" "$BUILDPACK_DIR/apt-archives-final/plotly-dependency" 2>&1 | indent
$CHROOT_DIR/fakeroot_install_apts_archives.sh "$BUILDPACK_DIR" "$CHROOT_DIR" "etc-dependency" "$BUILDPACK_DIR/apt-archives-final/etc-dependency" 2>&1 | indent


topic "Installing apts from Aptfile(online downloading)"
$CHROOT_DIR/fakeroot_install_apts_from_Aptfile.sh $BUILD_DIR $CHROOT_DIR 2>&1 | indent


topic "Installing r package(pre-comiled) from buildpack (cached)"
$CHROOT_DIR/fakeroot_install_r_binaries.sh "$BUILDPACK_DIR" "$CHROOT_DIR" "shiny-binary" "$BUILDPACK_DIR/apt-archives-final/shiny-binary" "force" 2>&1 | indent
$CHROOT_DIR/fakeroot_install_r_binaries.sh "$BUILDPACK_DIR" "$CHROOT_DIR" "ggplot2-binary" "$BUILDPACK_DIR/apt-archives-final/ggplot2-binary" "force" 2>&1 | indent
$CHROOT_DIR/fakeroot_install_r_binaries.sh "$BUILDPACK_DIR" "$CHROOT_DIR" "plotly-binary" "$BUILDPACK_DIR/apt-archives-final/plotly-binary" 2>&1 | indent


if [[ -f "$BUILD_DIR/user_provided_staging.sh" ]]; then
  chmod 777 $BUILD_DIR/user_provided_staging.sh
  $BUILD_DIR/user_provided_staging.sh "$BUILDPACK_DIR" "$CHROOT_DIR" 2>&1 | indent
  cd $CHROOT_DIR
fi

# install application author dependencies from CRAN
topic "R initialize: Executing init.r script (online downloading dependencies)"
# get the init.r file to use
# it can be init.[rR] or run.R
if [[ -f "$BUILD_DIR/init.r" ]]; then
  INIT_FILE="$BUILD_DIR/init.r"
elif [[ -f "$BUILD_DIR/init.R" ]]; then
  INIT_FILE="$BUILD_DIR/init.R"
else
  # assuming run.R is present
  unset INIT_FILE
fi


if [[ ! -z "$INIT_FILE" ]]; then
  # prepare wrapper script
  WRAPPER="$CHROOT_DIR/wrapper.R"
  cp "$BUILDPACK_DIR/bin/R/wrapper.R" $WRAPPER

  # perform insertions
  #  would have preferred to use sed or awk for this, but it's real tricky with multi-line
  #  replacements, so using a Ruby program, as Ruby is installed on Heroku by default
  if [ -z $CRAN_MIRROR ]; then
    CRAN_MIRROR="http://cran.ism.ac.jp"
  fi 
  ruby "$BUILDPACK_DIR/bin/R/util.rb" "$WRAPPER" "$INIT_FILE" "$CHROOT_DIR" "$CRAN_MIRROR"

  # execute the init wrapper
  # working directory must be /app so that provided packages/scripts can be found
  fakechroot fakeroot chroot $CHROOT_DIR /fakeroot_run_init_r.sh /wrapper.R   2>&1 | indent

  # determine whether the R script failed
  if [[ -f "$CHROOT_DIR/r_init_status" ]]; then
    echo "R initialized successfully" | indent
  else
    echo -e "\033[1;31mERROR: R initialize failed while executing \"$INIT_FILE\" you uploaded. Check the log for details.\033[0m" | indent
    exit 1
  fi

else
  echo "R initialized successfully" | indent
fi


topic "Finalizing staged image"

# remove archived apt-files in /var/cache/apt/archives, reducing about 60M
fakechroot fakeroot chroot $CHROOT_DIR apt-get clean
## TODO
#rm -rf $CHROOT_DIR/apts_from_aptfile 


## topic "moving  $CHROOT_DIR/*  => $BUILD_DIR "
cp -r $BUILD_DIR/* $CHROOT_DIR/  # copying user upload artifacts
rm -rf $BUILD_DIR/*   # clean up target folder.
mv $CHROOT_DIR/*  $BUILD_DIR  # back porting.
mkdir -p $BUILD_DIR/.profile.d 
cp -r $CHROOT_DIR/.profile.d/*  $BUILD_DIR/.profile.d/


topic "Staging completed"

