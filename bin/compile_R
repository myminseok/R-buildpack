#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}




APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

#/tmp/app/.apt
#CHROOT_DIR="$BUILD_DIR/.apt"
CHROOT_DIR="$BUILD_DIR"

export PATH="$CHROOT_DIR/usr/bin:$CHROOT_DIR/usr/sbin:/sbin:/usr/sbin:$PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/fakechroot:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$CHROOT_DIR/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p $CHROOT_DIR


topic "Updating apt caches"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
apt-get $APT_OPTIONS update | indent
apt-get $APT_OPTIONS clean | indent

topic "Install provided apts from buildpack (fakeroot, fakechroot, libc6-dev, r-base)"
#if ls -1 $APT_CACHE_DIR/archives/*.deb 1> /dev/null 2>1&; then
  ## BUILDPACK_DIR /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b/dependencies/*.deb
  ## APT_CACHE_DIR /tmp/cache/apt/cache/archives/
  #cp -Rv $BUILDPACK_DIR/dependencies/*.deb $APT_CACHE_DIR/archives 
#fi
#topic "[debug] >> 1 $BUILDPACK_DIR/dependencies"
#find $BUILDPACK_DIR/dependencies
#topic "[debug] << 1 $BUILDPACK_DIR/dependencies"
#topic "[debug] >> 1 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 1 $APT_CACHE_DIR/archives "

for DEB in $(ls -1 $BUILDPACK_DIR/dependencies/*.deb); do
    topic "Installing $DEB"
    dpkg -x $DEB $CHROOT_DIR/
done

## will be installed from buildpack
#topic "Setting up fakechroot"
#apt-get  $APT_OPTIONS -y --force-yes -d install fakeroot | indent
#apt-get  $APT_OPTIONS -y --force-yes -d install fakechroot | indent
#apt-get  $APT_OPTIONS -y --force-yes -d install libc6-dev | indent    # for R package compilation.
#apt-get  $APT_OPTIONS -y --force-yes -d install r-base | indent
#for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
#  topic "Installing $(basename $DEB)"
#  dpkg -x $DEB $CHROOT_DIR/
#done

topic "Setting up fakechroot"
mkdir -p $CHROOT_DIR/usr
mkdir -p $CHROOT_DIR/lib
mkdir -p $CHROOT_DIR/etc/alternatives
mkdir -p $CHROOT_DIR/var/lib/dpkg/alternatives
mkdir -p $CHROOT_DIR/var/lib/dpkg/updates
mkdir -p $CHROOT_DIR/var/lib/dpkg/info
mkdir -p $CHROOT_DIR/var/log
mkdir -p $CHROOT_DIR/var/cache/apt/archives
mkdir -p $CHROOT_DIR/tmp
mkdir -p $CHROOT_DIR/bin && cp -R /bin/* $CHROOT_DIR/bin/
mkdir -p $CHROOT_DIR/sbin && cp -R /sbin/* $CHROOT_DIR/sbin/
mkdir -p $CHROOT_DIR/usr/bin && cp -R /usr/bin/* $CHROOT_DIR/usr/bin/
mkdir -p $CHROOT_DIR/usr/sbin && cp -R /usr/sbin/* $CHROOT_DIR/usr/sbin/

mkdir -p $CHROOT_DIR/usr/lib/gcc && cp -R /usr/lib/gcc/* $CHROOT_DIR/usr/lib/gcc
ln -s /usr/lib/apt $CHROOT_DIR/usr/lib/apt
mkdir -p $CHROOT_DIR/usr/include &&  cp -R /usr/include/* $CHROOT_DIR/usr/include
mkdir -p $CHROOT_DIR/var/lib/dpkg  
cp /var/lib/dpkg/available $CHROOT_DIR/var/lib/dpkg/
cp /var/lib/dpkg/status $CHROOT_DIR/var/lib/dpkg/status

mkdir -p $CHROOT_DIR/usr/share && cp -R /usr/share/perl*  $CHROOT_DIR/usr/share/
mkdir -p $CHROOT_DIR/usr/lib && cp -R /usr/lib/perl*  $CHROOT_DIR/usr/lib/
mkdir -p $CHROOT_DIR/usr/share/debconf/ && cp -R /usr/share/debconf/* $CHROOT_DIR/usr/share/debconf/

mkdir -p $CHROOT_DIR/etc/apt && cp -R /etc/apt/* $CHROOT_DIR/etc/apt/
cp /etc/passwd  $CHROOT_DIR/etc/passwd
cp /etc/hosts $CHROOT_DIR/etc/hosts
cp /etc/group $CHROOT_DIR/etc/group
cp /etc/bash.bashrc $CHROOT_DIR/etc/bash.bashrc
cp /etc/debconf.conf $CHROOT_DIR/etc/debconf.conf

ln -s /proc $CHROOT_DIR/proc
mkdir -p $CHROOT_DIR/dev && ln -s /dev/pts $CHROOT_DIR/dev
mkdir -p $CHROOT_DIR/root && cp /home/vcap/.bashrc $CHROOT_DIR/root/.bashrc


topic "Install apt packages from Aptfile"

#topic "[debug] >> 2 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 2 $APT_CACHE_DIR/archives "

if [[ -s $BUILD_DIR/Aptfile ]]; then
   topic "Aptfile is empty, skip"
else

for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

#topic "[debug] >> 3 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 3 $APT_CACHE_DIR/archives "
mkdir -p $CHROOT_DIR
for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing from Aptfile $(basename $DEB)"
  dpkg -x $DEB $CHROOT_DIR/
done

fi

#**************************************************************************************************
## To archive apt-get deb files for buildpack only.
## *.deb will be packaged with droplet in $CHROOT_DIR/tmp-apt-archives folder
## and download using 'cf download-droplet <app-name> <local_file_path>'
## $CHROOT_DIR/tmp-apt-archives: folder to download *.deb  which can be use to make buildpack later.
## comment out following line after use.
#mkdir -p $CHROOT_DIR/tmp-apt-archived && cp -r $APT_CACHE_DIR/archives  $CHROOT_DIR/tmp-apt-archives
#**************************************************************************************************


topic "Install shiny packages into R"
mkdir -p cd $CHROOT_DIR/shiny_packages
cd $CHROOT_DIR/shiny_packages
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR Rcpp 0.12.12 Rcpp_0.12.12.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR httpvu 1.3.5 httpuv_1.3.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR mime 0.5 mime_0.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR jsonlite 1.5 jsonlite_1.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR xtable 1.8 xtable_1.8-2.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR digest 0.6.12 digest_0.6.12.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR htmltools 0.3.6 htmltools_0.3.6.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR R6 2.2.2 R6_2.2.2.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR sourcetools 0.1.6 sourcetools_0.1.6.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR shiny 1.0.4 shiny_1.0.4.tar.gz
cat <<EOF >$CHROOT_DIR/install_shiny_to_R_for_PCF_staging.sh
#!/bin/bash
source /root/.bashrc

# fix R for staging env
cd /usr/lib/R/etc
rm Renviron
cp Renviron.orig Renviron
rm Makeconf
ln -s /etc/R/Makeconf Makeconf
rm ldpaths
ln -s /etc/R/ldpaths ldpaths

export EDITOR=vim
R CMD INSTALL --build /shiny_packages/Rcpp_0.12.12.tar.gz
R CMD INSTALL --build /shiny_packages/httpuv_1.3.5.tar.gz
R CMD INSTALL --build /shiny_packages/mime_0.5.tar.gz
R CMD INSTALL --build /shiny_packages/jsonlite_1.5.tar.gz
R CMD INSTALL --build /shiny_packages/xtable_1.8-2.tar.gz
R CMD INSTALL --build /shiny_packages/digest_0.6.12.tar.gz
R CMD INSTALL --build /shiny_packages/htmltools_0.3.6.tar.gz
R CMD INSTALL --build /shiny_packages/R6_2.2.2.tar.gz
R CMD INSTALL --build /shiny_packages/sourcetools_0.1.6.tar.gz
R CMD INSTALL --build /shiny_packages/shiny_1.0.4.tar.gz

# R -e "install.packages('shiny', repos='http://cran.us.r-project.org')"
exit

EOF
chmod 777 $CHROOT_DIR/install_shiny_to_R_for_PCF_staging.sh
fakechroot fakeroot chroot $CHROOT_DIR /install_shiny_to_R_for_PCF_staging.sh
rm $CHROOT_DIR/install_shiny_to_R_for_PCF_staging.sh


cat <<EOF >$CHROOT_DIR/fakeroot.sh
#!/bin/bash
source $HOME/app/.profile.d/000_apt.sh
fakechroot fakeroot chroot $HOME/app/ /bin/bash
EOF
chmod 777 $CHROOT_DIR/fakeroot.sh


topic "Writing profile script"
mkdir -p $CHROOT_DIR/.profile.d
cat <<EOF >$CHROOT_DIR/.profile.d/000_apt.sh
#!/bin/bash
export CHROOT_DIR="\$HOME/app"
export PATH="\$CHROOT_DIR/usr/bin:\$CHROOT_DIR/usr/sbin:/sbin:/usr/sbin:\$PATH"
export LD_LIBRARY_PATH="\$CHROOT_DIR/usr/lib/x86_64-linux-gnu:\$CHROOT_DIR/usr/lib/i386-linux-gnu:\$CHROOT_DIR/usr/lib:\$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="\$CHROOT_DIR/usr/lib/x86_64-linux-gnu/fakechroot:\$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="/lib/x86_64-linux-gnu:/lib:/usr/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/R/lib:/usr/lib/R/modules/:/usr/lib/R/library/class/libs:$LD_LIBRARY_PATH"

export LIBRARY_PATH="\$CHROOT_DIR/usr/lib/x86_64-linux-gnu:\$CHROOT_DIR/usr/lib/i386-linux-gnu:\$CHROOT_DIR/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$CHROOT_DIR/usr/include:\$INCLUDE_PATH"
export INCLUDE_PATH="/usr/include:/usr/share/R/include:/usr/lib/R/library/Matrix/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$CHROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:\$CHROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:\$CHROOT_DIR/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF
chmod 777 $CHROOT_DIR/.profile.d/000_apt.sh



# TODO: create wrapper.
cat <<EOF >$CHROOT_DIR/R.sh
#!/bin/bash
source /root/.bashrc

# to fix R for runtime env
cd /usr/lib/R/etc
rm Renviron
cp Renviron.orig Renviron
rm Makeconf
ln -s /etc/R/Makeconf Makeconf
rm ldpaths
ln -s /etc/R/ldpaths ldpaths

export EDITOR=vim
R
EOF
chmod 777 $CHROOT_DIR/R.sh




#give environment to later buildpacks
#export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
