#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}




APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

#/tmp/app/.apt
#CHROOT_DIR="$BUILD_DIR/.apt"
#CHROOT_DIR="$BUILD_DIR"
CHROOT_DIR="/home/vcap/app"

export PATH="$CHROOT_DIR/usr/bin:$CHROOT_DIR/usr/sbin:$CHROOT_DIR/usr/lib/rstudio-server:/sbin:/usr/sbin:$PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/fakechroot:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$CHROOT_DIR/lib/x86_64-linux-gnu/:$CHROOT_DIR/usr/lib/x86_64-linux-gnu:$CHROOT_DIR/usr/lib/i386-linux-gnu:$CHROOT_DIR/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$CHROOT_DIR/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$CHROOT_DIR/usr/lib/x86_64-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/i386-linux-gnu/pkgconfig:$CHROOT_DIR/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p $CHROOT_DIR

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"


#topic "Updating apt caches"
#apt-get $APT_OPTIONS update | indent
#apt-get $APT_OPTIONS clean | indent


topic "Setting up fakechroot"
mkdir -p $CHROOT_DIR/usr
mkdir -p $CHROOT_DIR/lib
mkdir -p $CHROOT_DIR/etc/alternatives
mkdir -p $CHROOT_DIR/var/lib/dpkg/alternatives
mkdir -p $CHROOT_DIR/var/lib/dpkg/updates
mkdir -p $CHROOT_DIR/var/lib/dpkg/info
mkdir -p $CHROOT_DIR/var/log
mkdir -p $CHROOT_DIR/var/cache/apt/archives
mkdir -p $CHROOT_DIR/tmp
mkdir -p $CHROOT_DIR/bin && cp -R /bin/* $CHROOT_DIR/bin/
mkdir -p $CHROOT_DIR/sbin && cp -R /sbin/* $CHROOT_DIR/sbin/
mkdir -p $CHROOT_DIR/usr/bin && cp -R /usr/bin/* $CHROOT_DIR/usr/bin/
mkdir -p $CHROOT_DIR/usr/sbin && cp -R /usr/sbin/* $CHROOT_DIR/usr/sbin/
mkdir -p $CHROOT_DIR/usr/lib/gcc && cp -R /usr/lib/gcc/* $CHROOT_DIR/usr/lib/gcc
mkdir -p $CHROOT_DIR/usr/include &&  cp -R /usr/include/* $CHROOT_DIR/usr/include
mkdir -p $CHROOT_DIR/usr/share && cp -R /usr/share/perl*  $CHROOT_DIR/usr/share/
mkdir -p $CHROOT_DIR/usr/lib && cp -R /usr/lib/perl*  $CHROOT_DIR/usr/lib/
mkdir -p $CHROOT_DIR/var/lib/dpkg

export PRUNE_EXPR="-path /root -o -path /tmp -o -path /proc -o -path /sys -o -path /lost+found -o -path /etc/ssl/private -o -path /var/spool -o -path /var/cache -o -path /var/log"
find / \( $PRUNE_EXPR \) -prune -o -print | grep python | grep -v lock | grep -v Lock > list_python && cat list_python | cpio -p -dum $CHROOT_DIR 
find / \( $PRUNE_EXPR \) -prune -o -print | grep apt    | grep -v lock | grep -v Lock > list_apt && cat list_apt | cpio -p -dum $CHROOT_DIR 
find / \( $PRUNE_EXPR \) -prune -o -print | grep dpkg   | grep -v lock | grep -v Lock > list_dpkg && cat list_dpkg | cpio -p -dum $CHROOT_DIR 
find / \( $PRUNE_EXPR \) -prune -o -print | grep debconf| grep -v lock | grep -v Lock > list_debconf && cat list_debconf | cpio -p -dum $CHROOT_DIR 
find / \( $PRUNE_EXPR \) -prune -o -print | grep pam| grep -v lock | grep -v Lock > list_pam && cat list_pam | cpio -p -dum $CHROOT_DIR 
find / \( $PRUNE_EXPR \) -prune -o -print | grep insserv| grep -v lock | grep -v Lock > list_insserv && cat list_insserv | cpio -p -dum $CHROOT_DIR 

mkdir -p $CHROOT_DIR/lib/init && cp -R /lib/init/* $CHROOT_DIR/lib/init
mkdir -p $CHROOT_DIR/lib/lsb && cp -R /lib/lsb/* $CHROOT_DIR/lib/lsb


cp /var/lib/dpkg/available $CHROOT_DIR/var/lib/dpkg/available
cp /var/lib/dpkg/status $CHROOT_DIR/var/lib/dpkg/status
mkdir -p $CHROOT_DIR/etc/apt && cp -R /etc/apt/* $CHROOT_DIR/etc/apt/
#mkdir -p $CHROOT_DIR/usr/share/debconf/ && cp -R /usr/share/debconf/* $CHROOT_DIR/usr/share/debconf/
#cp /etc/debconf.conf $CHROOT_DIR/etc/debconf.conf

ln -s /proc $CHROOT_DIR/proc
ln -s /dev $CHROOT_DIR/dev
mkdir -p $CHROOT_DIR/root && cp /home/vcap/.bashrc $CHROOT_DIR/root/.bashrc
mkdir -p $CHROOT_DIR/etc/network && cp -R /etc/network/* $CHROOT_DIR/etc/network
cp /etc/passwd  $CHROOT_DIR/etc/passwd
cp /etc/hosts $CHROOT_DIR/etc/hosts
cp /etc/group $CHROOT_DIR/etc/group
cp /etc/bash.bashrc $CHROOT_DIR/etc/bash.bashrc
cp /etc/ld.so.conf $CHROOT_DIR/etc/ld.so.conf
cp /etc/ld.so.cache $CHROOT_DIR/etc/ld.so.cache



topic "Install provided apts from buildpack (fakeroot, fakechroot, libc6-dev, r-base)"

#if ls -1 $APT_CACHE_DIR/archives/*.deb 1> /dev/null 2>1&; then
  ## BUILDPACK_DIR /tmp/buildpacks/7e3717441352283936abc3b1f6772b1b/dependencies/*.deb
  ## APT_CACHE_DIR /tmp/cache/apt/cache/archives/
  #cp -Rv $BUILDPACK_DIR/dependencies/*.deb $APT_CACHE_DIR/archives 
#fi
#topic "[debug] >> 1 $BUILDPACK_DIR/dependencies"
#find $BUILDPACK_DIR/dependencies
#topic "[debug] << 1 $BUILDPACK_DIR/dependencies"
#topic "[debug] >> 1 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 1 $APT_CACHE_DIR/archives "

#for DEB in $(ls -1 $BUILDPACK_DIR/dependencies/fake*.deb); do
#    topic "Installing deb from buildpack $DEB"
#    dpkg -x $DEB $CHROOT_DIR/
#done
dpkg -x $BUILDPACK_DIR/dependencies/file____Users_kimm5__dev_ruby-buildpack_apt-archives_libfakechroot_2.17.2-1_amd64.deb $CHROOT_DIR/
dpkg -x $BUILDPACK_DIR/dependencies/file____Users_kimm5__dev_ruby-buildpack_apt-archives_fakechroot_2.17.2-1_all.deb $CHROOT_DIR/
dpkg -x $BUILDPACK_DIR/dependencies/file____Users_kimm5__dev_ruby-buildpack_apt-archives_libc6-dev_2.19-0ubuntu6.13_amd64.deb $CHROOT_DIR/

cp $BUILDPACK_DIR/bin/fakeroot_install_apts.sh $CHROOT_DIR/fakeroot_install_apts.sh

topic "[fakeroot] Updating apt caches"
#fakechroot fakeroot chroot $CHROOT_DIR apt-get update
fakechroot fakeroot chroot $CHROOT_DIR dpkg --configure -a

topic "Install apts from buildpack to fakeroot"
mkdir -p cd $CHROOT_DIR/apts_from_buildpack && cp $BUILDPACK_DIR/dependencies/*.deb $CHROOT_DIR/apts_from_buildpack
fakechroot fakeroot chroot $CHROOT_DIR /fakeroot_install_apts.sh /apts_from_buildpack

topic "Install apts from Aptfile"
#topic "[debug] >> 2 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 2 $APT_CACHE_DIR/archives "
if [ -s $BUILD_DIR/Aptfile ]; then
for PACKAGE in $(cat $BUILD_DIR/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done
#topic "[debug] >> 3 $APT_CACHE_DIR/archives "
#find $APT_CACHE_DIR/archives
#topic "[debug] << 3 $APT_CACHE_DIR/archives "
#mkdir -p $CHROOT_DIR
#for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
#  topic "Installing from Aptfile $(basename $DEB)"
#  dpkg -x $DEB $CHROOT_DIR/
#done
#**************************************************************************************************
## archived apt files can be packaged into buildpack later.
## download using 'cf download-droplet <app-name> <local_file_path>'
## /apts_from_aptfile folder to download *.deb which can be use to make buildpack later.
#**************************************************************************************************
mkdir -p cd $CHROOT_DIR/apts_from_aptfile && cp -R $APT_CACHE_DIR/archives/*.deb $CHROOT_DIR/apts_from_aptfile
fakechroot fakeroot chroot $CHROOT_DIR /fakeroot_install_apts.sh /apts_from_aptfile

fi

topic "[1] Fix broken symbolic link in fakeroot for container env(not staging env)"
cp $BUILDPACK_DIR/bin/fakeroot_print_broken_link.sh $CHROOT_DIR/fakeroot_print_broken_link.sh && chmod 777 $CHROOT_DIR/fakeroot_print_broken_link.sh
cp $BUILDPACK_DIR/bin/fakeroot_fix_symlink.sh $CHROOT_DIR/fakeroot_fix_symlink.sh

fakechroot fakeroot chroot $CHROOT_DIR  /fakeroot_print_broken_link.sh
sh $CHROOT_DIR/fakeroot_fix_symlink.sh
fakechroot fakeroot chroot $CHROOT_DIR  /fakeroot_print_broken_link.sh


topic "Install shiny packages into R"
mkdir -p cd $CHROOT_DIR/shiny_packages
cd $CHROOT_DIR/shiny_packages
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR Rcpp 0.12.12 Rcpp_0.12.12.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR httpvu 1.3.5 httpuv_1.3.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR mime 0.5 mime_0.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR jsonlite 1.5 jsonlite_1.5.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR xtable 1.8 xtable_1.8-2.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR digest 0.6.12 digest_0.6.12.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR htmltools 0.3.6 htmltools_0.3.6.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR R6 2.2.2 R6_2.2.2.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR sourcetools 0.1.6 sourcetools_0.1.6.tar.gz
$BUILDPACK_DIR/bin/download_dependency $BUILDPACK_DIR shiny 1.0.4 shiny_1.0.4.tar.gz

cp $BUILDPACK_DIR/bin/fakeroot_install_shiny_to_R.sh $CHROOT_DIR/fakeroot_install_shiny_to_R.sh
fakechroot fakeroot chroot $CHROOT_DIR sh /fakeroot_install_shiny_to_R.sh


topic "[2] Fix broken symbolic link in fakeroot for container env(not staging env) 2 "
fakechroot fakeroot chroot $CHROOT_DIR  /fakeroot_print_broken_link.sh
sh $CHROOT_DIR/fakeroot_fix_symlink.sh
fakechroot fakeroot chroot $CHROOT_DIR  /fakeroot_print_broken_link.sh


topic "Writing profile script"
mkdir -p $CHROOT_DIR/.profile.d
cp $BUILDPACK_DIR/bin/000_apt.sh $CHROOT_DIR/.profile.d/000_apt.sh

# TODO: create wrapper.
cat <<EOF >$CHROOT_DIR/R_setup.sh
#!/bin/bash
source /root/.bashrc

# to fix R for runtime env
#cd /usr/lib/R/etc
#rm Renviron
#cp Renviron.orig Renviron
#rm Makeconf
#ln -s /etc/R/Makeconf Makeconf
#rm ldpaths
#ln -s /etc/R/ldpaths ldpaths
touch /tmp/app
chmod 777 /tmp/app
export EDITOR=vim
EOF
chmod 777 $CHROOT_DIR/R_setup.sh



cat <<EOF >$CHROOT_DIR/fakeroot.sh
#!/bin/bash
source $HOME/app/.profile.d/000_apt.sh
fakechroot fakeroot chroot $HOME/app/ /bin/bash
EOF
chmod 777 $CHROOT_DIR/fakeroot.sh


#give environment to later buildpacks
#export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"




topic "moving  $CHROOT_DIR/*  => $BUILD_DIR "
cp -r $BUILD_DIR/* $CHROOT_DIR/
rm -rf $BUILD_DIR/*
mv $CHROOT_DIR/*  $BUILD_DIR
mkdir -p $BUILD_DIR/.profile.d 
cp -r $CHROOT_DIR/.profile.d/*  $BUILD_DIR/.profile.d/

topic  "$CHROOT_DIR: "
ls -al $CHROOT_DIR
topic  "$BUILD_DIR: "
ls -al $BUILD_DIR



